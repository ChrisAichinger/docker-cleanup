# An example cleanup-rules.conf file.
#
# The rules in this file is evaluated in-order for every container and image.
# The first matching rule is applied, containers are processed before images.
#
# Tip: use the --dry-run argument to see what will happen without performing
# any real actions.

# Keep all containers and images - remove these lines to enable docker-cleanup.
KEEP CONTAINER IF True;
KEEP IMAGE IF True;

# Keep currently running containers, delete others if they were last running
# more than a week ago.
KEEP CONTAINER IF Container.State.Running;
DELETE CONTAINER IF Container.State.FinishedAt.before('1 week ago');

# Delete dangling (unnamed and not used by containers) images.
DELETE IMAGE IF Image.Dangling;


#############################################################
# Other possibly useful rules, uncomment to enable them.

# Always keep the container named webserver.
# KEEP CONTAINER IF Container.Name == 'webserver';

# Delete containers based on an image named mysql:latest if older than 2 days.
# DELETE CONTAINER IF Container.Image.Name == 'mysql:latest' and
#                     Container.Created.before('2 days ago');

# Other date formats are supported: '2015-05-13', '2015.05.13', '13.05.2015'
# Time can also be included: '2015.05.13 16:35', '13.05.2015 16:35:22'
# DELETE CONTAINER IF Container.Image.Name == 'mysql:latest' and
#                     Container.Created.before('13.5.2015 16:35');

# Force container removal, even if it's still running (docker rm -f)
# FORCE DELETE CONTAINER IF Container.Name == 'suspicious_darwin';

# Always keep images with repository name root/pgsql or tagged 'latest'
# KEEP IMAGE IF Image.Repository == 'root/pgsql';
# KEEP IMAGE IF Image.Tag == 'latest';

# Force image removal, even if it is still used by a container (docker rmi -f)
# FORCE DELETE IMAGE IF Container.Image.Repository == 'web/apache2.2';
